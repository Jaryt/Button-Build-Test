"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const configuration_base_1 = __importDefault(require("./configuration-base"));
const lodash_1 = require("lodash");
const get_options_1 = require("../utils/get-options");
const option_names_1 = __importDefault(require("./option-names"));
const get_filter_fn_1 = __importDefault(require("../utils/get-filter-fn"));
const prepare_reporters_1 = __importDefault(require("../utils/prepare-reporters"));
const string_1 = require("../utils/string");
const render_template_1 = __importDefault(require("../utils/render-template"));
const warning_message_1 = __importDefault(require("../notifications/warning-message"));
const resolve_path_relatively_cwd_1 = __importDefault(require("../utils/resolve-path-relatively-cwd"));
const default_values_1 = require("./default-values");
const option_source_1 = __importDefault(require("./option-source"));
const CONFIGURATION_FILENAME = '.testcaferc.json';
const DEFAULT_SCREENSHOTS_DIRECTORY = 'screenshots';
const OPTION_FLAG_NAMES = [
    option_names_1.default.skipJsErrors,
    option_names_1.default.quarantineMode,
    option_names_1.default.debugMode,
    option_names_1.default.debugOnFail,
    option_names_1.default.skipUncaughtErrors,
    option_names_1.default.stopOnFirstFail,
    option_names_1.default.takeScreenshotsOnFails,
    option_names_1.default.developmentMode,
    option_names_1.default.retryTestPages,
    option_names_1.default.disablePageCaching,
    option_names_1.default.disablePageReloads,
    option_names_1.default.disableScreenshots
];
class TestCafeConfiguration extends configuration_base_1.default {
    constructor() {
        super(CONFIGURATION_FILENAME);
    }
    async init(options = {}) {
        await super.init();
        const opts = await this._load();
        if (opts) {
            this._options = configuration_base_1.default._fromObj(opts);
            await this._normalizeOptionsAfterLoad();
        }
        this.mergeOptions(options);
    }
    prepare() {
        this._prepareFlags();
        this._setDefaultValues();
    }
    notifyAboutOverriddenOptions() {
        if (!this._overriddenOptions.length)
            return;
        const optionsStr = string_1.getConcatenatedValuesString(this._overriddenOptions);
        const optionsSuffix = string_1.getPluralSuffix(this._overriddenOptions);
        configuration_base_1.default._showConsoleWarning(render_template_1.default(warning_message_1.default.configOptionsWereOverriden, optionsStr, optionsSuffix));
        this._overriddenOptions = [];
    }
    get startOptions() {
        const result = {
            hostname: this.getOption('hostname'),
            port1: this.getOption('port1'),
            port2: this.getOption('port2'),
            options: {
                ssl: this.getOption('ssl'),
                developmentMode: this.getOption('developmentMode'),
                retryTestPages: this.getOption('retryTestPages')
            }
        };
        if (result.options.retryTestPages)
            result.options.staticContentCaching = default_values_1.STATIC_CONTENT_CACHING_SETTINGS;
        return result;
    }
    _prepareFlags() {
        OPTION_FLAG_NAMES.forEach(name => {
            const option = this._ensureOption(name, void 0, option_source_1.default.Configuration);
            option.value = !!option.value;
        });
    }
    async _normalizeOptionsAfterLoad() {
        await this._prepareSslOptions();
        this._prepareFilterFn();
        this._ensureArrayOption(option_names_1.default.src);
        this._ensureArrayOption(option_names_1.default.browsers);
        this._ensureArrayOption(option_names_1.default.clientScripts);
        this._prepareReporters();
    }
    _prepareFilterFn() {
        const filterOption = this._ensureOption(option_names_1.default.filter, null, option_source_1.default.Configuration);
        if (!filterOption.value)
            return;
        const filterOptionValue = filterOption.value;
        if (filterOptionValue.testGrep)
            filterOptionValue.testGrep = get_options_1.getGrepOptions(option_names_1.default.filterTestGrep, filterOptionValue.testGrep);
        if (filterOptionValue.fixtureGrep)
            filterOptionValue.fixtureGrep = get_options_1.getGrepOptions(option_names_1.default.filterFixtureGrep, filterOptionValue.fixtureGrep);
        filterOption.value = get_filter_fn_1.default(filterOption.value);
    }
    _ensureScreenshotPath() {
        const path = resolve_path_relatively_cwd_1.default(DEFAULT_SCREENSHOTS_DIRECTORY);
        const screenshots = this._ensureOption(option_names_1.default.screenshots, {}, option_source_1.default.Configuration).value;
        if (!screenshots.path)
            screenshots.path = path;
    }
    _prepareReporters() {
        const reporterOption = this._options[option_names_1.default.reporter];
        if (!reporterOption)
            return;
        const optionValue = lodash_1.castArray(reporterOption.value);
        reporterOption.value = prepare_reporters_1.default(optionValue);
    }
    async _prepareSslOptions() {
        const sslOptions = this._options[option_names_1.default.ssl];
        if (!sslOptions)
            return;
        sslOptions.value = await get_options_1.getSSLOptions(sslOptions.value);
    }
    _setDefaultValues() {
        this._ensureOptionWithValue(option_names_1.default.selectorTimeout, default_values_1.DEFAULT_TIMEOUT.selector, option_source_1.default.Configuration);
        this._ensureOptionWithValue(option_names_1.default.assertionTimeout, default_values_1.DEFAULT_TIMEOUT.assertion, option_source_1.default.Configuration);
        this._ensureOptionWithValue(option_names_1.default.pageLoadTimeout, default_values_1.DEFAULT_TIMEOUT.pageLoad, option_source_1.default.Configuration);
        this._ensureOptionWithValue(option_names_1.default.speed, default_values_1.DEFAULT_SPEED_VALUE, option_source_1.default.Configuration);
        this._ensureOptionWithValue(option_names_1.default.appInitDelay, default_values_1.DEFAULT_APP_INIT_DELAY, option_source_1.default.Configuration);
        this._ensureOptionWithValue(option_names_1.default.concurrency, default_values_1.DEFAULT_CONCURRENCY_VALUE, option_source_1.default.Configuration);
        this._ensureScreenshotPath();
    }
    static get FILENAME() {
        return CONFIGURATION_FILENAME;
    }
}
exports.default = TestCafeConfiguration;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,